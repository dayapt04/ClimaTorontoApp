
#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil expand-links:t f:t
#+options: inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+options: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+title: Proyecto ICCD332 Arquitectura de Computadores
#+date: 11-08-2024
#+author: Daniel Ismael Flores Espín, Alicia Pereira Dayana Tuqueres.
#+email: daniel.flores01@epn.edu.ec alicia.pereira@epn.edu.ec  
#+language: es
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 27.1 (Org mode 9.7.5)
#+cite_export:
* City Weather APP
Este es el proyecto de fin de semestre en donde se pretende demostrar
las destrezas obtenidas durante el transcurso de la asignatura de
**Arquitectura de Computadores**.

1. Conocimientos de sistema operativo Linux
2. Conocimientos de Emacs/Jupyter
3. Configuración de Entorno para Data Science con Mamba/Anaconda
4. Literate Programming
 
** Estructura del proyecto
Se recomienda que el proyecto se cree en el /home/ del sistema
operativo i.e. /home/<user>/. Allí se creará la carpeta /CityWeather/
#+begin_src shell :results output :exports both
pwd
mkdir TorontoWeather
cd TorontoWeather
ls -ls
#+end_src

#+RESULTS:
: /home/daniel
: total 0

El proyecto ha de tener los siguientes archivos y
subdirectorios. Adaptar los nombres de los archivos según las ciudades
específicas del grupo.

#+begin_src shell :results output :exports results
mkdir weather-site
cd weather-site
mkdir content
cd content
mkdir images
cd ..
cd ..
mkdir public
cd public
mkdir images
cd
cd TorontoWeather
tree
#+end_src

#+RESULTS:
#+begin_example
.
├── index.org
├── index.org~
├── public
│   └── images
└── weather-site
    └── content
        └── images

5 directories, 2 files
#+end_example

Puede usar Emacs para la creación de la estructura de su proyecto
usando comandos desde el bloque de shell. Recuerde ejecutar el bloque
con ~C-c C-c~. Para insertar un bloque nuevo utilice ~C-c C-,~ o ~M-x
org-insert-structure-template~. Seleccione la opción /s/ para src y
adapte el bloque según su código tenga un comandos de shell, código de
Python o de Java. En este documento ~.org~ dispone de varios ejemplos
funcionales para escribir y presentar el código.


** Formulación del Problema
Se desea realizar un registro climatológico de una ciudad
$\mathcal{C}$. Para esto, escriba un script de Python/Java que permita
obtener datos climatológicos desde el API de [[https://openweathermap.org/current#one][openweathermap]]. El API
hace uso de los valores de latitud $x$ y longitud $y$ de la ciudad
$\mathcal{C}$ para devolver los valores actuales a un tiempo $t$.

Los resultados obtenidos de la consulta al API se escriben en un
archivo /clima-<ciudad>-hoy.csv/. Cada ejecución del script debe
almacenar nuevos datos en el archivo. Utilice *crontab* y sus
conocimientos de Linux y Programación para obtener datos del API de
/openweathermap/ con una periodicidad de 15 minutos mediante la
ejecución de un archivo ejecutable denominado
/get-weather.sh/. Obtenga al menos 50 datos. Verifique los
resultados. Todas las operaciones se realizan en Linux o en el
WSL. Las etapas del problema se subdividen en:

    1. Conformar los grupos de 2 estudiantes y definir la ciudad
       objeto de estudio.
    2.  Crear su API gratuito en [[https://openweathermap.org/current#one][openweathermap]]
    3. Escribir un script en Python/Java que realice la consulta al
       API y escriba los resultados en /clima-<ciudad>-hoy.csv/. El
       archivo ha de contener toda la información que se obtiene del
       API en columnas. Se debe observar que los datos sobre lluvia
       (rain) y nieve (snow) se dan a veces si existe el fenómeno.
    3. Desarrollar un ejecutable /get-weather.sh/ para ejecutar el
       programa Python/Java.[fn:1]
       #+begin_src shell :exports both
         pwd
       #+end_src

       #+RESULTS:
       : /home/daniel/TorontoWeather/weather-site/content

    4. Configurar Crontab para la adquisición de datos. Escriba el
       comando configurado. Respalde la ejecución de crontab en un
       archivo output.log
    5. Realizar la presentación del Trabajo utilizando la generación
       del sitio web por medio de Emacs. Para esto es necesario crear
       la carpeta **weather-site** dentro del proyecto. Puede ajustar el
       /look and feel/ según sus preferencias. El servidor a usar es
       el **simple-httpd** integrado en Emacs que debe ser instalado:
       - Usando comandos Emacs: ~M-x package-install~ presionamos
         enter (i.e. RET) y escribimos el nombre del paquete:
         simple-httpd
       - Configurando el archivo init.el

       #+begin_src elisp
         (use-package simple-httpd
            :ensure t)
       #+end_src

       Instrucciones de sobre la creación del sitio web se tiene en el
       vídeo de instrucciones y en el archivo [[https://github.com/LeninGF/EPN-Lectures/blob/main/iccd332ArqComp-2024-A/Tutoriales/Org-Website/Org-Website.org][Org-Website.org]] en el
       GitHub del curso

    6. Su código debe estar respaldado en GitHub/BitBucket, la
       dirección será remitida en la contestación de la tarea
** Descripción del código
En esta sección se debe detallar segmentos importantes del código
desarrollado así como la **estrategia de solución** adoptada por el
grupo para resolver el problema. Divida su código en unidades
funcionales para facilitar su presentación y exposición.

*Inicio Código*
#+begin_src python :session :results output exports both
import requests
import csv
from datetime import datetime, timezone

API_KEY = 'c6185820a6c5cd5977498d9079994b33'
LATITUDE = 43.651070
LONGITUDE = -79.347015
FILE_NAME = 'clima-toronto-hoy.csv'

#+end_src

En esta sección del código se importan las librerías necesarias para hacer solicitudes HTTP, trabajar con archivos CSV y manejar fechas y hora. Elementos necesariios para la ejecución del programa.

Por otra parte, se declaran las variables correspondientes a la clave única de API que permite el acceso a los datos, y la longitud y latitud de la ciudad a analizar, en este caso, Toronto, Canadá.


*Convertir /Json/ a /Diccionario/ de Python*
#+begin_src python :session :results output exports both
def get_weather(lat, lon, api):
    URL = f'http://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={api}'
    response = requests.get(URL)
    return response.json()    

def process(json):
    weather_data = {
        'datetime': datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S'),
        'coord_lon': json.get('coord', {}).get('lon', 'N/A'),
        'coord_lat': json.get('coord', {}).get('lat', 'N/A'),
        'weather_id': json.get('weather', [{}])[0].get('id', 'N/A'),
        'weather_main': json.get('weather', [{}])[0].get('main', 'N/A'),
        'weather_description': json.get('weather', [{}])[0].get('description', 'N/A'),
        'weather_icon': json.get('weather', [{}])[0].get('icon', 'N/A'),
        'base': json.get('base', 'N/A'),
        'main_temp': json.get('main', {}).get('temp', 'N/A'),
        'main_feels_like': json.get('main', {}).get('feels_like', 'N/A'),
        'main_temp_min': json.get('main', {}).get('temp_min', 'N/A'),
        'main_temp_max': json.get('main', {}).get('temp_max', 'N/A'),
        'main_pressure': json.get('main', {}).get('pressure', 'N/A'),
        'main_humidity': json.get('main', {}).get('humidity', 'N/A'),
        'main_sea_level': json.get('main', {}).get('sea_level', 'N/A'),
        'main_grnd_level': json.get('main', {}).get('grnd_level', 'N/A'),
        'visibility': json.get('visibility', 'N/A'),
        'wind_speed': json.get('wind', {}).get('speed', 'N/A'),
        'wind_deg': json.get('wind', {}).get('deg', 'N/A'),
        'wind_gust': json.get('wind', {}).get('gust', 'N/A'),
        'clouds_all': json.get('clouds', {}).get('all', 'N/A'),
        'sys_type': json.get('sys', {}).get('type', 'N/A'),
        'sys_id': json.get('sys', {}).get('id', 'N/A'),
        'sys_country': json.get('sys', {}).get('country', 'N/A'),
        'sys_sunrise': json.get('sys', {}).get('sunrise', 'N/A'),
        'sys_sunset': json.get('sys', {}).get('sunset', 'N/A'),
        'timezone': json.get('timezone', 'N/A'),
        'id': json.get('id', 'N/A'),
        'name': json.get('name', 'N/A'),
        'cod': json.get('cod', 'N/A')
    }
    return weather_data
#+end_src

#+RESULTS:
: Python 3.11.9 | packaged by conda-forge | (main, Apr 19 2024, 18:36:13) [GCC 12.3.0] on linux
: Type "help", "copyright", "credits" or "license" for more information.
: >>> python.el: native completion setup loaded

La función /get_weather/ realiza una solicitud a la API de OpenWeatherMap para obtener los datos deseados de la ciudad, la cual, se especifica gracias a la latitud y longitud, utilizando la clave única proporcionada. La función posteriormente se encarga de devolver estos datos en un formato que puede ser manipulado por Python.

La función /process/ por otra parte, toma el objeto JSON generado y extrae la información metereológica relevante organizándola en un diccionario. 


*Guardar el archivo csv*
#+begin_src python :session :results output exports both
def write2csv(data, csv_filename):
    with open(csv_filename, mode='a', newline='') as file:
        writer = csv.writer(file)
        
        # Escribo la cabecera si el archivo está vacío
        if file.tell() == 0:
            writer.writerow([
                'datetime', 'coord_lon', 'coord_lat', 'weather_id', 'weather_main', 'weather_description', 'weather_icon',
                'base', 'main_temp', 'main_feels_like', 'main_temp_min', 'main_temp_max', 'main_pressure', 'main_humidity',
                'main_sea_level', 'main_grnd_level', 'visibility', 'wind_speed', 'wind_deg', 'wind_gust', 'clouds_all',
                'sys_type', 'sys_id', 'sys_country', 'sys_sunrise', 'sys_sunset', 'timezone', 'id', 'name', 'cod'
            ])
        
        writer.writerow([
            data.get('datetime'),
            data.get('coord_lon'),
            data.get('coord_lat'),
            data.get('weather_id'),
            data.get('weather_main'),
            data.get('weather_description'),
            data.get('weather_icon'),
            data.get('base'),
            data.get('main_temp'),
            data.get('main_feels_like'),
            data.get('main_temp_min'),
  data.get('main_temp_max'),
            data.get('main_pressure'),
            data.get('main_humidity'),
            data.get('main_sea_level'),
            data.get('main_grnd_level'),
            data.get('visibility'),
            data.get('wind_speed'),
            data.get('wind_deg'),
            data.get('wind_gust'),
            data.get('clouds_all'),
            data.get('sys_type'),
            data.get('sys_id'),
            data.get('sys_country'),
            data.get('sys_sunrise'),
            data.get('sys_sunset'),
            data.get('timezone'),
            data.get('id'),
            data.get('name'),
            data.get('cod')
        ])
#+end_src

#+RESULTS:

La función /write2csv/ agrega una nueva fila de datos meteorológicos al archivo CSV especificado. Si el archivo está vacío, la función también escribe una fila de cabecera con los nombres de las columnas.

** Script ejecutable sh
Se coloca el contenido del script ejecutable. Recuerde que se debe
utilizar el entorno de **anaconda/mamba** denominado **iccd332** para
la ejecución de Python; independientemente de que tenga una
instalación nativa de Python

En el caso de los shell script se puede usar `which sh` para conocer
la ubicación del ejecutable
#+begin_src shell :results output :exports both
which sh
#+end_src

#+RESULTS:
: /usr/bin/sh

De igual manera se requiere localizar el entorno de mamba *iccd332*
que será utilizado

#+begin_src shell :results output :exports both
which mamba
#+end_src

#+RESULTS:
: /home/dayapt04/miniforge3/condabin/mamba

Archivo ejecutable:

#+begin_src shell :results output :exports both
cd ..
rm get-weather.sh
touch get-weather.sh
echo '#!/bin/bash' >> get-weather.sh
echo 'source /home/daniel/miniforge3/etc/profile.d/conda.sh' >> get-weather.sh
echo 'conda activate iccd332' >> get-weather.sh
echo 'python main.py' >> get-weather.sh
cat get-weather.sh
#+end_src

#+RESULTS:
: #!/bin/bash
: source /home/daniel/miniforge3/etc/profile.d/conda.sh
: conda activate iccd332
: python main.py

** Configuración de Crontab
Se indica la configuración realizada en crontab para la adquisición de datos

#+begin_src shell
cd ..
chmod +x get-weather.sh
#+end_src

#+RESULTS:

#+begin_src shell
crontab -r
(crontab -l ; echo "*/2 * * * * cd TorontoWeather && ./get-weather.sh >> output.log 2>&1") | crontab -
#+end_src

#+RESULTS:

* Presentación de resultados
Para la pressentación de resultados se utilizan las librerías de Python:
- matplotlib
- pandas

Alternativamente como pudo estudiar en el Jupyter Notebook
[[https://github.com/LeninGF/EPN-Lectures/blob/main/iccd332ArqComp-2024-A/Proyectos/CityWeather/CityTemperatureAnalysis.ipynb][CityTemperatureAnalysis.ipynb]], existen librerías alternativas que se
pueden utilizar para presentar los resultados gráficos. En ambos
casos, para que funcione los siguientes bloques de código, es
necesario que realice la instalación de los paquetes usando ~mamba
install <nombre-paquete>~
** Muestra Aleatoria de datos
Presentar una muestra de 10 valores aleatorios de los datos obtenidos.
#+caption: Lectura de archivo csv
#+begin_src python :session :results output exports both import os
import pandas as pd
# lectura del archivo csv obtenido
df = pd.read_csv('/home/daniel/TorontoWeather/clima-toronto-hoy.csv')
# se imprime la estructura del dataframe en forma de filas x columnas
print(df.shape)
#+end_src

#+RESULTS:
: (57, 30)



#+caption: Despliegue de datos aleatorios
#+begin_src python :session :exports both :results value table :return table
table1 = df.sample(10)
table = [list(table1)]+[None]+table1.values.tolist()
table
#+end_src

#+RESULTS:
| datetime            | coord_lon | coord_lat | weather_id | weather_main | weather_description | weather_icon | base     | main_temp | main_feels_like | main_temp_min | main_temp_max | main_pressure | main_humidity | main_sea_level | main_grnd_level | visibility | wind_speed | wind_deg | wind_gust | clouds_all | sys_type |  sys_id | sys_country | sys_sunrise | sys_sunset | timezone |      id | name             | cod |
|---------------------+-----------+-----------+------------+--------------+---------------------+--------------+----------+-----------+-----------------+---------------+---------------+---------------+---------------+----------------+-----------------+------------+------------+----------+-----------+------------+----------+---------+-------------+-------------+------------+----------+---------+------------------+-----|
| 2024-08-13 06:10:01 |  -79.3488 |   43.6459 |        800 | Clear        | clear sky           | 01n          | stations |    291.58 |          291.59 |        290.43 |        291.67 |          1018 |            81 |           1018 |            1005 |      10000 |       3.07 |      320 |      6.33 |          7 |        2 | 2040045 | CA          |  1723544423 | 1723595049 |   -14400 | 6176177 | Ward's Island    | 200 |
| 2024-08-13 06:32:01 |  -79.3538 |   43.6543 |        804 | Clouds       | overcast clouds     | 04n          | stations |    291.65 |          291.62 |        290.97 |         292.1 |          1018 |            79 |           1018 |            1005 |      10000 |       3.09 |      330 |       nan |        100 |        2 | 2040045 | CA          |  1723544423 | 1723595052 |   -14400 | 6176177 | Ward's Island    | 200 |
| 2024-08-13 05:35:02 |   -79.347 |   43.6511 |        802 | Clouds       | scattered clouds    | 03n          | stations |    291.03 |          291.01 |        289.33 |        292.12 |          1018 |            82 |           1018 |            1005 |      10000 |       2.57 |      330 |       nan |         40 |        1 |     718 | CA          |  1723544422 | 1723595050 |   -14400 | 6176177 | Ward's Island    | 200 |
| 2024-08-13 06:40:02 |   -79.347 |   43.6511 |        804 | Clouds       | overcast clouds     | 04n          | stations |    291.67 |          291.64 |        290.99 |        292.12 |          1018 |            79 |           1018 |            1005 |      10000 |       3.09 |      330 |       nan |        100 |        2 | 2040045 | CA          |  1723544422 | 1723595050 |   -14400 | 6167863 | Downtown Toronto | 200 |
| 2024-08-13 07:00:02 |  -79.3488 |   43.6459 |        804 | Clouds       | overcast clouds     | 04n          | stations |    291.68 |          291.65 |        290.98 |        292.11 |          1018 |            79 |           1018 |            1005 |      10000 |       3.09 |      330 |       nan |        100 |        2 | 2040045 | CA          |  1723544423 | 1723595049 |   -14400 | 6167863 | Downtown Toronto | 200 |
| 2024-08-13 06:54:01 |  -79.3538 |   43.6543 |        804 | Clouds       | overcast clouds     | 04n          | stations |    291.59 |          291.58 |         290.8 |         292.1 |          1018 |            80 |           1018 |            1005 |      10000 |       3.09 |      330 |       nan |        100 |        1 |     718 | CA          |  1723544423 | 1723595052 |   -14400 | 6167863 | Downtown Toronto | 200 |
| 2024-08-13 14:34:01 |   -79.347 |   43.6511 |        803 | Clouds       | broken clouds       | 04d          | stations |    296.05 |          295.99 |        295.03 |        297.59 |          1019 |            61 |           1019 |            1007 |      10000 |       0.45 |       68 |      1.79 |         65 |        2 | 2040045 | CA          |  1723544422 | 1723595050 |   -14400 | 6176177 | Ward's Island    | 200 |
| 2024-08-13 06:18:01 |   -79.347 |   43.6511 |        804 | Clouds       | overcast clouds     | 04n          | stations |    291.53 |          291.51 |        290.26 |        292.12 |          1018 |            80 |           1018 |            1005 |      10000 |       3.09 |      330 |       nan |        100 |        1 |     718 | CA          |  1723544422 | 1723595050 |   -14400 | 6167863 | Downtown Toronto | 200 |
| 2024-08-13 06:38:01 |   -79.347 |   43.6511 |        804 | Clouds       | overcast clouds     | 04n          | stations |    291.67 |          291.64 |        290.99 |        292.12 |          1018 |            79 |           1018 |            1005 |      10000 |       3.09 |      330 |       nan |        100 |        2 | 2040045 | CA          |  1723544422 | 1723595050 |   -14400 | 6167863 | Downtown Toronto | 200 |
| 2024-08-13 14:22:01 |   -79.347 |   43.6511 |        803 | Clouds       | broken clouds       | 04d          | stations |    295.25 |          295.16 |        294.47 |        297.59 |          1019 |            63 |           1019 |            1007 |      10000 |       0.45 |       23 |      1.79 |         65 |        2 | 2095531 | CA          |  1723544422 | 1723595050 |   -14400 | 6176177 | Ward's Island    | 200 |

** Gráfica Temperatura vs Tiempo
Realizar una gráfica de la Temperatura en el tiempo.


El siguiente código permite hacer la gráfica de la temperatura vs
tiempo para Org 9.7+. Para saber que versión dispone puede ejecutar
~M-x org-version~

#+begin_src python :results file :exports both :session
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
# Define el tamaño de la figura de salida
fig = plt.figure(figsize=(8,6))
plt.plot(df['datetime'], df['main_temp']) # dibuja las variables dt y temperatura
# ajuste para presentacion de fechas en la imagen 
plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=2))
# plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))  
plt.grid()
# Titulo que obtiene el nombre de la ciudad del DataFrame
plt.title(f'Main Temp vs Time in {next(iter(set(df.name)))}')
plt.xticks(rotation=40) # rotación de las etiquetas 40°
fig.tight_layout()
fname = './images/temperature.png'
plt.savefig(fname)
fname
#+end_src

#+caption: Gráfica Temperatura vs Tiempo
#+RESULTS:
[[file:./images/temperature.png]]

Debido a que el archivo index.org se abre dentro de la carpeta
/content/, y en cambio el servidor http de emacs se ejecuta desde la
carpeta /public/ es necesario copiar el archivo a la ubicación
equivalente en ~/public/images~


**  Realice una gráfica de Humedad con respecto al tiempo
#+begin_src python :results file :exports both :session
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
# Define el tamaño de la figura de salida
fig = plt.figure(figsize=(8,6))
plt.plot(df['datetime'], df['main_humidity']) # dibuja las variables dt y humedad
# ajuste para presentacion de fechas en la imagen 
plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=2))
# plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))  
plt.grid()
# Titulo que obtiene el nombre de la ciudad del DataFrame
plt.title(f'Main Humidity vs Time in {next(iter(set(df.name)))}')
plt.xticks(rotation=40) # rotación de las etiquetas 40°
fig.tight_layout()
fname1 = './images/humidity.png'
plt.savefig(fname1)
fname1
#+end_src

#+RESULTS:
[[file:./images/humidity.png]]

#+caption: Gráfica Humedad vs Tiempo
#+RESULTS:

**  *Opcional* Presente alguna gráfica de interés.
#+begin_src python :results file :exports both :session
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
# Define el tamaño de la figura de salida
fig = plt.figure(figsize=(8,6))
plt.plot(df['datetime'], df['wind_speed']) # dibuja las variables dt y velocidad del viento
# ajuste para presentacion de fechas en la imagen 
plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=2))
# plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))  
plt.grid()
# Titulo que obtiene el nombre de la ciudad del DataFrame
plt.title(f'Wind Speed vs Time in {next(iter(set(df.name)))}')
plt.xticks(rotation=40) # rotación de las etiquetas 40°
fig.tight_layout()
fname2 = './images/windspeed.png'
plt.savefig(fname2)
fname2
#+end_src

#+RESULTS:
[[file:./images/windspeed.png]]

#+caption: Gráfica Velocidad del Viento vs Tiempo
#+begin_src shell
cp -rfv ./images/* /home/daniel/TorontoWeather/weather-site/public/images
#+end_src

#+RESULTS:
| './images/humidity.png'    | -> | '/home/daniel/TorontoWeather/weather-site/public/images/humidity.png'    |
| './images/temperature.png' | -> | '/home/daniel/TorontoWeather/weather-site/public/images/temperature.png' |
| './images/windspeed.png'   | -> | '/home/daniel/TorontoWeather/weather-site/public/images/windspeed.png'   |

